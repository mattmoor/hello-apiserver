/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package experimental

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalBuild = builders.NewInternalResource(
		"builds",
		func() runtime.Object { return &Build{} },
		func() runtime.Object { return &BuildList{} },
	)
	InternalBuildStatus = builders.NewInternalResourceStatus(
		"builds",
		func() runtime.Object { return &Build{} },
		func() runtime.Object { return &BuildList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("experimental.mattmoor.io").WithKinds(
		InternalBuild,
		InternalBuildStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Build struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   BuildSpec
	Status BuildStatus
}

type BuildSpec struct {
	Source *SourceSpec
	Steps  []StepSpec
	Images []string
}

type BuildStatus struct {
	Operation    string
	Done         bool
	ErrorMessage string
}

type StepSpec struct {
	Name       string
	Env        []string
	Dir        string
	Entrypoint string
	Args       []string
	Volumes    []VolumeSpec
}

type SourceSpec struct {
	StorageSource *StorageSourceSpec
	RepoSource    *RepoSourceSpec
}

type VolumeSpec struct {
	Name string
	Path string
}

type RepoSourceSpec struct {
	ProjectId  string
	RepoName   string
	BranchName string
	TagName    string
	CommitSHA  string
	Dir        string
}

type StorageSourceSpec struct {
	Bucket     string
	Object     string
	Generation int
}

//
// Build Functions and Structs
//
// +k8s:deepcopy-gen=false
type BuildStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type BuildStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type BuildList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Build
}

func (Build) NewStatus() interface{} {
	return BuildStatus{}
}

func (pc *Build) GetStatus() interface{} {
	return pc.Status
}

func (pc *Build) SetStatus(s interface{}) {
	pc.Status = s.(BuildStatus)
}

func (pc *Build) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Build) SetSpec(s interface{}) {
	pc.Spec = s.(BuildSpec)
}

func (pc *Build) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Build) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Build) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Build.
// +k8s:deepcopy-gen=false
type BuildRegistry interface {
	ListBuilds(ctx request.Context, options *internalversion.ListOptions) (*BuildList, error)
	GetBuild(ctx request.Context, id string, options *metav1.GetOptions) (*Build, error)
	CreateBuild(ctx request.Context, id *Build) (*Build, error)
	UpdateBuild(ctx request.Context, id *Build) (*Build, error)
	DeleteBuild(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewBuildRegistry(sp builders.StandardStorageProvider) BuildRegistry {
	return &storageBuild{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageBuild struct {
	builders.StandardStorageProvider
}

func (s *storageBuild) ListBuilds(ctx request.Context, options *internalversion.ListOptions) (*BuildList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*BuildList), err
}

func (s *storageBuild) GetBuild(ctx request.Context, id string, options *metav1.GetOptions) (*Build, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Build), nil
}

func (s *storageBuild) CreateBuild(ctx request.Context, object *Build) (*Build, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, false)
	if err != nil {
		return nil, err
	}
	return obj.(*Build), nil
}

func (s *storageBuild) UpdateBuild(ctx request.Context, object *Build) (*Build, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, builders.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*Build), nil
}

func (s *storageBuild) DeleteBuild(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
